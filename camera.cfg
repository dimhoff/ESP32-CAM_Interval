# ESP32-CAM Interval Configuration file
# ------------------------------------
# This file contains 'key = value' pairs. Spaces are stripped from the front
# and back of both the key and value.
# Lines starting with a '#' and empty lines are ignored.
# Boolean options can have the following value: true, yes, 1, false, no, 0
#

# Interval in milliseconds between taking pictures
# type: integer
# min: 1000
# max: TODO
# default: 5000
interval = 5000

# Timezone specification. See POSIX TZ(5) environment variable for details
# about the format.
# Example:
#  - 'CET-1CEST,M3.5.0,M10.5.0/3' = Europe:Amsterdam/Berlin/Paris/Madrid
# type: string
# default: GMT0
timezone = GMT0

# Enable small LED when taking picture
# type: bool
# default: true
enable_busy_led = true

# Enable Flash LED when taking picture
# type: bool
# default: false
enable_flash = false

# Amount of shots to take before taking the real image. These extra image are
# made to train the AGC/AWB filters. This can be especially usefull if there is
# a big interval between images, in which the lighting condition can
# significantly change.
# type: int
# min: 0
# max: -
# default: 0
training_shots = 0

# Rotate image.
# Value is the degrees of clockwise rotation, in steps of 90Â°.
# type: enum
# values: 0, 90, 180, 270, -90, -180, -270
# default: 0
rotation = 0

# Select image size
# Value can either be the mode name(eg. 'VGA') or resolution(eg. '640x480').
# Not all sizes are available on all camera modules. If the resolution is to
# high for the connected camera the highst available resolution is used
# instead.
#
# Valid resolutions:
#  - QQVGA = 160x120
#  - QQVGA2 = 128x160
#  - QCIF = 176x144
#  - HQVGA = 240x176
#  - QVGA = 320x240
#  - CIF = 400x296
#  - VGA = 640x480
#  - SVGA = 800x600
#  - XGA = 1024x768
#  - SXGA = 1280x1024
#  - UXGA = 1600x1200
#  - QXGA = 2048x1536 (Only with OV3660 sensor)
# default: 1600x1200
framesize = 1600x1200

# JPEG Quantization Scale Factor
# A higher number means worst quality, but smaller files
# type: integer
# min: 10
# max: 63
# default: 10
quality = 10

# Adjust image contrast
# type: integer
# min: -2
# max: 2
# default: 0
contrast = 0

# Adjust image brightness
# type: integer
# min: -2
# max: 2
# default: 0
brightness = 0

# Adjust image saturation
# type: integer
# min: -2
# max: 2
# default: 0
saturation = 0

# Enable color bar test pattern
# Add's a colored bar pattern across image for testing
# type: bool
# default: false
colorbar = false

# Flip image horizontally
# type: bool
# default: false
hmirror = false

# Flip image vertically
# type: bool
# default: false
vflip = false

# Automatic White Balance
# type: bool
# default: true
awb = true

# Enable (??automatic??) AWB gain
# TODO: what does it do???
# type: bool
# default: true
awb_gain = true

# White balance mode
# type: Enum(auto, sunny, cloudy, office, home)
# default: auto
wb_mode = auto

# Enable Automatic Gain Control
# type: bool
# default: true
agc = true

# Manual Gain Control level
# Set the gain when automatic gain control is disabled. Gain can be set between
# 1x to 32x.
# type: integer
# min: 1
# max: 32
# default: 1
agc_gain = 1

# Automatic Gain control level ceiling
# If Automatic Gain Control(AGC) enabled, gain will not be set higher then the
# gain ceiling.
# Values:
#   0 = 2x
#   1 = 4x
#   2 = 8x
#   3 = 16x
#   4 = 32x
#   5 = 64x
#   6 = 128x
# type: integer
# min: 0
# max: 6
# default: 2 (= 8x)
gainceiling = 2

# Enable Automatic Exposure Control
# TODO: what is difference with aec2???This is called AEC SENSOR in arduino ex.
# type: bool
# default: true
aec = true

# AEC_SEL????
# TODO: how does this work, what does it do???
# TODO: what is difference with aec2???This is called AEC DSP in arduino example
# type: bool
# default: true
aec2 = true

# Exposure time factor, if Automatic Exposure Control disabled
# T_exposure = aec_value * T_line
# type: integer
# min: 0
# max: 1200
# default: 51
aec_value = 51

# Adjust AEC/AGC
# A higher level gives a brighter image, lower is darker.
# type: integer
# min: -2
# max: 2
# default: (something close to 0, but not exactly the same??)
ae_level = 0

# Enable Downsizeing (Downsamp/Crop/Window)
# TODO: what does it do?? I guess this takes pictures at a higher frame size
# then requested and combines the pixel data(downsamples) to the wanted
# resolution to get a better quality image. On highest resolution it won't do
# anything?
# type: bool
# default: true
dcw = true

# Enable Black Pixel Cancellation
# type: bool
# default: false
bpc = false

# Enable White Pixel Cancellation
# type: bool
# default: true
wpc = true

# Enable gamma compensation in the RAW domain
# """
# The main purpose of the Gamma (GMA) function is to compensate for the
# non-linear characteristics of the sensor. GMA converts the pixel values
# according to the Gamma curve to compensate the sensor output under different
# light strengths.  The non-linear gamma curve is approximately constructed
# with different linear functions. Raw gamma compensates the image in the RAW
# domain.
# """ -- OV5640 Datasheet
# type: bool
# default: true
raw_gma = true

# Enable Lens correction
# """
# The main purpose of the LENC is to compensate for lens imperfection.
# According to the area where each pixel is located, the module calculates a
# gain for the pixel, correcting each pixel with its gain calculated to
# compensate for the light distribution due to lens curvature. The LENC
# correcting curve automatic calculation according sensor gain is also added so
# that the LENC can adapt with the sensor gain. Also, the LENC supports the
# subsample function in both horizontal and vertical directions. Contact your
# local OmniVision FAE for lens correction settings.
# """ -- OV5640 Datasheet
# type: bool
# default: true
lenc = true

# Special effect
# type: Enum(none, negative, grayscale, red tint, green tint, blue tint, sepia)
# default: none
special_effect = none
